version: "3.8"
services:
  app:
    image: {{ $dockerTagNamespace }}/app
    container_name: {{ $dockerTagNamespace }}-app
    restart: unless-stopped
    tty: true
    env_file: ../../../.env
    environment:
      COMPOSER_MEMORY_LIMIT: -1
    volumes:
      - ../../../:/var/www/html
      - ../nginx/ssl:{{ $dockerSslDirectory }}
      - ../php.ini:/usr/local/etc/php/conf.d/php-{{ $dockerTagNamespace }}.ini
      - ../php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - {{ $dockerTagNamespace }}-network
    depends_on:
      - redis
      - mysql
  nginx:
    image: {{ $dockerTagNamespace }}/nginx
    container_name: {{ $dockerTagNamespace }}-nginx
    restart: unless-stopped
    env_file: ../../../.env
    tty: true
    ports:
      - "{{ $nginxHostHttpPort }}:80"
      - "{{ $nginxHostHttpsPort }}:443"
    volumes:
      - ../../../:/var/www/html
      - ../nginx/conf.d:/etc/nginx/conf.d
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/ssl:{{ $dockerSslDirectory }}
    networks:
      - {{ $dockerTagNamespace }}-network
    healthcheck: 
      test: ["CMD-SHELL", 'service nginx status || exit 1']
      interval: 10s
      timeout: 2s
      retries: 10
  redis:
    container_name: {{ $dockerTagNamespace }}-redis
    image: redis:6
    restart: unless-stopped
    env_file: ../../../.env
    tty: true
    ports:
      - "{{ $redisHostPort }}:6379"
    volumes:
      - {{ $dockerTagNamespace }}-redis:/data
    networks:
      - {{ $dockerTagNamespace }}-network
    healthcheck: 
      test: ["CMD-SHELL", 'redis-cli ping']
      interval: 10s
      timeout: 2s
      retries: 10
  mysql:
    image: mysql:8.0.27
    container_name: {{ $dockerTagNamespace }}-mysql
    restart: unless-stopped
    tty: true
    ports:
      - "{{ $dbHostPort }}:3306"
    volumes:
      - {{ $dockerTagNamespace }}-mysql:/var/lib/mysql/
    networks:
      - {{ $dockerTagNamespace }}-network
    env_file: ../../../.env
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    healthcheck: 
      test: ["CMD-SHELL",  "/usr/bin/mysql --user=${DB_USERNAME} --password=${DB_PASSWORD} --execute \"SHOW DATABASES;\""]
      interval: 10s
      timeout: 2s
      retries: 10
  scheduler:
    image: {{ $dockerTagNamespace }}/app
    container_name: {{ $dockerTagNamespace }}-scheduler
    restart: unless-stopped
    env_file: ../../../.env
    networks:
      - {{ $dockerTagNamespace }}-network
    depends_on:
      - app
    volumes:
      - ../../../:/var/www/html
    command: >
        bash -c "
          echo 'Running scheduler...'
          while [ true ]; do
              php /var/www/html/artisan schedule:run --verbose --no-interaction &
              sleep 60
          done
        "
  queue:
    image: {{ $dockerTagNamespace }}/app
    container_name: {{ $dockerTagNamespace }}-queue
    restart: unless-stopped
    networks:
      - {{ $dockerTagNamespace }}-network
    depends_on:
      - app
    volumes:
      - ../../../:/var/www/html
    env_file: ../../../.env
    command: >
        bash -c "echo 'Waiting for jobs..' && php /var/www/html/artisan queue:work --verbose --tries=3 --timeout=90"
        
@if($appEnv == 'local')
  mailhog:
    image: 'mailhog/mailhog:latest'
    container_name: {{ $dockerTagNamespace }}-mailhog
    restart: unless-stopped
    ports:
        - "${MAILHOG_PORT:-1025}:1025"
        - "${MAILHOG_DASHBOARD_PORT:-8025}:8025"
    networks:
        - "{{ $dockerTagNamespace }}-network"
@endif

networks:
  {{ $dockerTagNamespace }}-network:
    driver: bridge
volumes:
  {{ $dockerTagNamespace }}-mysql:
    driver: local
  {{ $dockerTagNamespace }}-redis:
    driver: local