# Show the logo if no commands are being called or a --help option is present

# header.sh doesnt have access to lib/helpers for some reason.
cli_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

source "$cli_path/src/support/colors.sh"
source "$cli_path/src/support/helpers.sh"

if [ "$#" -eq 0 ] || [[ "$*" == *--help* ]]; then
    export LOGO_TEXT=$(
        cat <<EOF

                █▄░█ █ █▀▀ █░█ ▀█▀ █░█░█ █ █▄░█ █▀▄
                █░▀█ █ █▄█ █▀█ ░█░ ▀▄▀▄▀ █ █░▀█ █▄▀

EOF
    )

    export LOGO_BOAT=$(
        cat <<EOF

*     .  *        *                    *           .     .  *        *                    *
    .         '       .        .     .        .         '       .        .     .
.  *           *                     *        .  *           *                     *
                .                                    .                .
*      *         '    *          .   *           .      *         '    *          .   *

              .     .  *        *                    *
                               ___
                            ___)__)___
                            )__)__)__)
                           _____||_____
                            )_ )__)_)_)
                            __|_||_|____
                            \         /
$(blue "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
EOF
    )
    yellow "$LOGO_TEXT"
    bold "$LOGO_BOAT"
fi

version_command() {
  echo "$version"
}

nightwind_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind - A command-line interface for interacting and managing Laravel docker projects with blade rendered templates.\n"
    echo

  else
    printf "nightwind - A command-line interface for interacting and managing Laravel docker projects with blade rendered templates.\n"
    echo

  fi

  printf "Usage:\n"
  printf "  nightwind [command]\n"
  printf "  nightwind [command] --help | -h\n"
  printf "  nightwind --version | -v\n"
  echo

  printf "Commands:\n"
  echo "  init       Initialize project .nightwind directory & template files."
  echo "  render     Render the project .nightwind template files."
  echo "  up         Start docker compose services."
  echo "  build      Build docker image(s) in .nightwind/dockerfiles."
  echo "  down       Stop docker compose services."
  echo "  exec       Exec a command on a container."
  echo "  nuke       Nuke all project docker compose services."
  echo "  composer   Proxy a composer command to the app service container."
  echo "  npm        Proxy a npm command to the app service container."
  echo "  artisan    Proxy a artisan command to the app service container."
  echo "  logs       Tail/follow a project container logs."
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

nightwind_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind init - Initialize project .nightwind directory & template files.\n"
    echo

  else
    printf "nightwind init - Initialize project .nightwind directory & template files.\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "Usage:\n"
  printf "  nightwind init [options]\n"
  printf "  nightwind init --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    echo "  --force"
    printf "    Overwrite existing files.\n"
    echo

  fi
}

nightwind_render_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind render - Render the project .nightwind template files.\n"
    echo

  else
    printf "nightwind render - Render the project .nightwind template files.\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "Usage:\n"
  printf "  nightwind render [options] [...]\n"
  printf "  nightwind render --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    echo "  --rebuild"
    printf "    Rebuild the nightwind/renderer image.\n"
    echo

    echo "  --remove"
    printf "    Remove the nightwind/renderer image when done.\n"
    echo

  fi
}

nightwind_up_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind up - Start docker compose services.\n"
    echo

  else
    printf "nightwind up - Start docker compose services.\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "Usage:\n"
  printf "  nightwind up [options] [...]\n"
  printf "  nightwind up --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    echo "  --force"
    printf "    Overwrite existing files.\n"
    echo

  fi
}

nightwind_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind build - Build docker image(s) in .nightwind/dockerfiles.\n"
    echo

  else
    printf "nightwind build - Build docker image(s) in .nightwind/dockerfiles.\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "Usage:\n"
  printf "  nightwind build [TARGET] [...]\n"
  printf "  nightwind build --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    printf "Arguments:\n"

    echo "  TARGET"
    printf "    The image to build, if excluded will build all in the dockerfiles directory.\n    Should exist in .nightwind/dockerfiles/<target>.Dockerfile\n"
    echo

  fi
}

nightwind_down_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind down - Stop docker compose services.\n"
    echo

  else
    printf "nightwind down - Stop docker compose services.\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "Usage:\n"
  printf "  nightwind down [...]\n"
  printf "  nightwind down --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

nightwind_exec_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind exec - Exec a command on a container.\n"
    echo

  else
    printf "nightwind exec - Exec a command on a container.\n"
    echo

  fi

  printf "Alias: e\n"
  echo

  printf "Usage:\n"
  printf "  nightwind exec CONTAINER [COMMAND] [...]\n"
  printf "  nightwind exec --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    printf "Arguments:\n"

    echo "  CONTAINER"
    printf "    The target container to exec command.\n"
    echo

    echo "  COMMAND"
    printf "    The command to exec.\n"
    printf "    Default: bash\n"
    echo

  fi
}

nightwind_nuke_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind nuke - Nuke all project docker compose services.\n"
    echo

  else
    printf "nightwind nuke - Nuke all project docker compose services.\n"
    echo

  fi

  printf "Alias: n\n"
  echo

  printf "Usage:\n"
  printf "  nightwind nuke [options] [...]\n"
  printf "  nightwind nuke --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    echo "  --force"
    printf "    Force nuke in non local environments.\n"
    echo

  fi
}

nightwind_composer_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind composer - Proxy a composer command to the app service container.\n"
    echo

  else
    printf "nightwind composer - Proxy a composer command to the app service container.\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "Usage:\n"
  printf "  nightwind composer [COMMAND] [options] [...]\n"
  printf "  nightwind composer --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    echo "  --container CONTAINER"
    printf "    Specify container name if custom.\n"
    printf "    Default: app\n"
    echo

    printf "Arguments:\n"

    echo "  COMMAND"
    printf "    The command to execute.\n"
    echo

  fi
}

nightwind_npm_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind npm - Proxy a npm command to the app service container.\n"
    echo

  else
    printf "nightwind npm - Proxy a npm command to the app service container.\n"
    echo

  fi

  printf "Alias: np\n"
  echo

  printf "Usage:\n"
  printf "  nightwind npm [COMMAND] [options] [...]\n"
  printf "  nightwind npm --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    echo "  --container CONTAINER"
    printf "    Specify container name if custom.\n"
    printf "    Default: app\n"
    echo

    printf "Arguments:\n"

    echo "  COMMAND"
    printf "    The command to execute.\n"
    echo

  fi
}

nightwind_artisan_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind artisan - Proxy a artisan command to the app service container.\n"
    echo

  else
    printf "nightwind artisan - Proxy a artisan command to the app service container.\n"
    echo

  fi

  printf "Alias: a\n"
  echo

  printf "Usage:\n"
  printf "  nightwind artisan [COMMAND] [options] [...]\n"
  printf "  nightwind artisan --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    echo "  --container CONTAINER"
    printf "    Specify container name if custom.\n"
    printf "    Default: app\n"
    echo

    printf "Arguments:\n"

    echo "  COMMAND"
    printf "    The command to execute.\n"
    echo

  fi
}

nightwind_logs_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind logs - Tail/follow a project container logs.\n"
    echo

  else
    printf "nightwind logs - Tail/follow a project container logs.\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "Usage:\n"
  printf "  nightwind logs CONTAINER [...]\n"
  printf "  nightwind logs --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    printf "Arguments:\n"

    echo "  CONTAINER"
    printf "    The target container to tail logs.\n"
    echo

  fi
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
lightgreen() { print_in_color "\e[1;32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

#!/bin/bash

filter_docker_running() {
  docker info > /dev/null 2>&1 || echo "$(red DependencyError:) $(bold Docker is not running.)"
}

filter_is_initialized(){
    if [ ! -d ".nightwind" ] || [ -z "$(ls -A ".nightwind/templates")" ]
    then
        echo "$(red This project does not appear to be initialized. Run: \`nightwind init\`)"
    fi
}

filter_env_file_required(){
    if [ ! -f ".env" ]
    then

        echo "$(red  Project .env file is missing.)"
    fi
}

filter_requires_docker_tag_namespace(){
    result="$(get_docker_tag_namespace)"
    if [ -z "$result" ];
    then
        echo "$(red The docker_tag_namespace variable is empty or couldnt be parsed from variables.json. Bad quotes/json\?)"
    fi
}

filter_is_laravel_directory(){
    if  [ ! -f "composer.json" ] || ! grep -q "laravel/framework" composer.json

    then
        echo "$(red Your current directory doesnt appear to be a laravel/framework project.)"
    fi
}

filter_requires_variables(){
    if [ ! -f ".nightwind/variables.json" ]
    then

        echo "$(red  Command requires the .nightwind/variables.json file to perform task\(s\). Did you run \`nightwind init\`?)"
    fi
}

filter_requires_rendered_files(){
    if [ ! -d ".nightwind/rendered" ] || [ -z "$(ls -A ".nightwind/rendered")" ]
    then
        echo "$(red The template files have not been rendered. Did you run \`nightwind render\`)"
    fi
}

#!/bin/bash

#---
#---
get_cli_path(){
    echo "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
}

#---
#---
parse_variable_json_string_value(){
    result="$(grep -o "\"${1}\": \"[^\"]*" .nightwind/variables.json | grep -o '[^"]*$')"
    echo $result
}

#---
#---
get_docker_tag_namespace(){
    result="$(parse_variable_json_string_value docker_tag_namespace)"

    echo $result
}

#---
#---
write_file(){
    file=$1
    contents=$3
    force=$4

    if [[ $force != "1" ]] && [[ -f "$file" ]];

    then
        yellow "WARN: File $file already exists."
    fi

    if [[ $force == "1" || ! -f "$file" ]];

    then
        cyan "INFO: Saved file $file."
        echo "$contents" > $file
    fi
}

#---
#---
get_docker_compose_yaml_files_argument(){

    yaml_file_arg="-f .nightwind/rendered/compose/app.yaml"

    for yaml in $(find ".nightwind/rendered/compose" -type f -name '*.yaml' ! -name app.yaml);

    do
        path="${yaml##*.nightwind/}"

        path=".nightwind/$path"
        yaml_file_arg="${yaml_file_arg} -f $path"
        target="${path%%.*}"
    done

    echo "$yaml_file_arg"
}
#---
#---
confirm() {
    message="${1:-Are you sure? [y/N]} "
    yellow "$message"
    read -r -p '' response
    echo -ne "\r"
    case "$response" in
    [yY][eE][sS] | [yY])
        true
        ;;
    *)
        false
        ;;
    esac
}
#---
#---
run_hook(){
    hook="$1"
    if [ -f ".nightwind/hooks/$hook" ];
    then
        if [[  -x ".nightwind/hooks/$hook" ]];
        then
            cyan "INFO: Running $hook hook script"
            .nightwind/hooks/$hook
        else
            red "ERROR: Hook file not executable: .nightwind/hooks/$hook"
            exit 1;
        fi
    fi

}

#---
#---
exec_command(){
    local container="$1"
    local command="$2"
    local -n other_arguments="$3"

    docker_tag_namespace="$(get_docker_tag_namespace)"

    container="$docker_tag_namespace-${container/$docker_tag_namespace-/''}"

    cyan "INFO: Running: docker exec -it "$container" "$command" $other_arguments"
    docker exec -it "$container" $command ${other_arguments[@]}
}

#---
#---
build_project_images(){
    local target="$1"
    local -n build_args="$2"

    docker_tag_namespace="$(get_docker_tag_namespace)"

    if [ -z $target ]
    then
        paths="$(find ".nightwind/rendered/dockerfiles" -type f -name '*.Dockerfile')"
    else
        paths=(".nightwind/rendered/dockerfiles/$target.Dockerfile")
    fi

    for dockerfile in $paths;

    do
        filename="${dockerfile##*dockerfiles/}" ## get relative path
        target="${filename%%.*}"

        cyan "INFO: Running: docker build -t $docker_tag_namespace/$target -f .nightwind/rendered/dockerfiles/$filename . ${build_args[@]}"
        docker build -t $docker_tag_namespace/$target -f ".nightwind/rendered/dockerfiles/$filename" . ${build_args[@]}
    done
}

nightwind_init_command() {
  #!/bin/bash

  set -e

  domain=${args[--domain]}

  mkdir -p ".nightwind"

  for file in $(find $(get_cli_path)/stubs -type f);

  do

      relative_path="${file##*stubs/}"

      destination_path=".nightwind/$relative_path"

      mkdir -p "$(dirname $destination_path)"

      write_file $destination_path ".nightwind/$stub_type/$relative_path" "$(cat $file)" ${args[--force]}
  done

  if [ ! -f ".nightwind/.gitignore" ];
  then

      echo -e "rendered/" > ".nightwind/.gitignore"
  fi

  chmod +x .nightwind/hooks/*

  lightgreen "Initialized .nightwind directory & files."

  set +e
}

nightwind_render_command() {
  #!/bin/bash
  set -e

  if [[ "$(docker images -q nightwind/renderer 2>/dev/null)" == "" ]] || [[ ${args[--rebuild]} == '1' ]];

  then
      cd "$(get_cli_path)/src/renderer"
      cyan "INFO: Building docker image for nightwind/renderer."
      docker build -t nightwind/renderer --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) .
      cd -
  fi

  rm -rf $(get_cli_path)/src/renderer/.project
  cp -R $PWD/.nightwind $(get_cli_path)/src/renderer/.project
  cp $PWD/.env $(get_cli_path)/src/renderer/.project/.env

  mkdir -p $PWD/.nightwind/rendered
  chown $(id -u):$(id -g) $PWD/.nightwind/rendered

  docker run --rm  \
      --volume "$(get_cli_path)/src/renderer:/home/nightwind" \
      --volume "$PWD/.nightwind/rendered:/home/nightwind/.project/rendered" \
      --workdir /home/nightwind \
      nightwind/renderer ./entrypoint "${other_args[@]}"

  rm -rf $(get_cli_path)/src/renderer/.project

  if [[ ${args[--remove]} == '1' ]];
  then
      docker image rm nightwind/renderer
  fi

  set +e
}

nightwind_up_command() {
  #!/bin/bash
  set -e

  run_hook "before_up"

  cyan "INFO: Checking built docker images."

  docker_tag_namespace="$(get_docker_tag_namespace)"

  for dockerfile in $(find ".nightwind/rendered/dockerfiles" -type f -name '*.Dockerfile');

  do
      target="${dockerfile##*dockerfiles/}"

      target=${target%.Dockerfile*}

      if [[ "$(docker images -q $docker_tag_namespace/$target 2>/dev/null)" == "" ]]; then
          yellow "WARNING: Docker image $docker_tag_namespace/$target doesnt exist, building image for start up."
          declare -A empty_args=() # required by the build_project_images helper
          build_project_images $target empty_args
      fi
  done

  cyan "INFO: Checking available compose files."

  yaml_file_arg="$(get_docker_compose_yaml_files_argument)"

  cyan "INFO: Running: docker compose $yaml_file_arg up -d $other_args"
  docker compose $yaml_file_arg up -d $other_args

  run_hook "after_up"

  lightgreen "Started services!"

  set +e
}

nightwind_build_command() {
  #!/bin/bash

  set -e

  target="${args[target]}"

  if [ ! -d ".nightwind/rendered/dockerfiles" ];
  then
      echo "$(red .nightwind/rendered/dockerfiles doesnt exist, nothing to build.)"
      exit 1
  fi

  docker_tag_namespace="$(get_docker_tag_namespace)"
  build_project_images "$target" other_args

  set +e
}

nightwind_down_command() {
  #!/bin/bash
  set -e

  run_hook "before_down"

  cyan "INFO: Checking available compose files."
  yaml_file_arg="$(get_docker_compose_yaml_files_argument)"

  cyan "INFO: Running: docker compose $yaml_file_arg down $other_args"
  docker compose $yaml_file_arg down $other_args

  # run hook if successful.
  if [ $? -eq 0 ]; then
      run_hook "after_down"
  fi

  lightgreen "Stopped services!"
}

nightwind_exec_command() {
  #!/bin/bash
  set -e

  exec_command ${args[container]} ${args[command]} other_args

  set +e
}

nightwind_nuke_command() {
  #!/bin/bash

  set -e

  if [ ! -d ".nightwind/rendered/compose" ] || [ -z "$(ls -A ".nightwind/rendered/compose")" ]; then
     echo "$(red .nightwind/rendered/compose doesnt exist or is empty, nothing to nuke.)"
     exit 1;
  fi

  nuke(){
      yaml_file_arg="$(get_docker_compose_yaml_files_argument)"

      cyan "INFO: Running: docker-compose $yaml_file_arg down -v --rmi all"
      docker-compose $yaml_file_arg down -v --rmi all

      lightgreen "Stopped and removed project docker resources."
  }

  if [ $APP_ENV != "local" ] && [[ ${args[--force]} != "1" ]];
  then
      yellow "*********************************************************************************************"
      yellow "                              W A R N I N G                                                  "
      yellow "                         Non-Local Env: $APP_ENV                                             "
      yellow "      This command stops & removes ALL of your docker compose services & resources           "
      yellow "      and also runs docker system prune, this is meant for a local env, please use with      "
      yellow "      caution as docker system prune removes things not associated with project.             "
      yellow "                                                                                             "
      yellow "*********************************************************************************************"

      if confirm "Continue?";
      then
          nuke
      else
          red "Aborted."
      fi
  else
      nuke
  fi

  set +e
}

nightwind_composer_command() {
  #!/bin/bash
  set -e

  exec_command ${args[--container]} "composer ${args[command]}" other_args

  set +e
}

nightwind_npm_command() {
  #!/bin/bash
  set -e

  exec_command ${args[--container]} "npm ${args[command]}" other_args

  set +e
}

nightwind_artisan_command() {
  #!/bin/bash

  set -e

  exec_command ${args[--container]} "php artisan ${args[command]}" other_args

  set +e
}

nightwind_logs_command() {
  #!/bin/bash
  set -e

  docker_tag_namespace="$(get_docker_tag_namespace)"
  container="${args[container]}"
  container="$docker_tag_namespace-${container/$docker_tag_namespace-/''}"

  cyan "INFO: Running: docker logs "$container" --follow --timestamps $other_args"
  docker logs "$container" --follow --timestamps $other_args

  set +e
}

parse_requirements() {

  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    nightwind_usage
    exit
    ;;

  esac

  action=${1:-}

  case $action in
  -* )
    ;;

  init | i )
    action="init"
    shift
    nightwind_init_parse_requirements "$@"
    shift $#
    ;;

  render | r )
    action="render"
    shift
    nightwind_render_parse_requirements "$@"
    shift $#
    ;;

  up | u )
    action="up"
    shift
    nightwind_up_parse_requirements "$@"
    shift $#
    ;;

  build | b )
    action="build"
    shift
    nightwind_build_parse_requirements "$@"
    shift $#
    ;;

  down | d )
    action="down"
    shift
    nightwind_down_parse_requirements "$@"
    shift $#
    ;;

  exec | e )
    action="exec"
    shift
    nightwind_exec_parse_requirements "$@"
    shift $#
    ;;

  nuke | n )
    action="nuke"
    shift
    nightwind_nuke_parse_requirements "$@"
    shift $#
    ;;

  composer | c )
    action="composer"
    shift
    nightwind_composer_parse_requirements "$@"
    shift $#
    ;;

  npm | np )
    action="npm"
    shift
    nightwind_npm_parse_requirements "$@"
    shift $#
    ;;

  artisan | a )
    action="artisan"
    shift
    nightwind_artisan_parse_requirements "$@"
    shift $#
    ;;

  logs | l )
    action="logs"
    shift
    nightwind_logs_parse_requirements "$@"
    shift $#
    ;;

  * )
    nightwind_usage
    exit 1
    ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )

      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done

}

nightwind_init_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_init_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v find)" ]]; then
    printf "missing dependency: find\n"
    exit 1
  fi

  action="init"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    --force )

      args[--force]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )

      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

nightwind_render_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_render_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v find)" ]]; then
    printf "missing dependency: find\n"
    exit 1
  fi

  action="render"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    --rebuild )

      args[--rebuild]=1
      shift
      ;;

    --remove )

      args[--remove]=1
      shift
      ;;

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )

      other_args+=("$1")
      shift
      ;;

    esac
  done

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_is_initialized)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_variables)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

nightwind_up_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_up_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v docker)" ]]; then
    printf "missing dependency: docker\n"
    exit 1
  fi
  if ! [[ -x "$(command -v find)" ]]; then
    printf "missing dependency: find\n"
    exit 1
  fi

  action="up"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    --force )

      args[--force]=1
      shift
      ;;

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )

      other_args+=("$1")
      shift
      ;;

    esac
  done

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_docker_running)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_env_file_required)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_variables)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_rendered_files)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_docker_tag_namespace)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

nightwind_build_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_build_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v docker)" ]]; then
    printf "missing dependency: docker\n"
    exit 1
  fi
  if ! [[ -x "$(command -v find)" ]]; then
    printf "missing dependency: find\n"
    exit 1
  fi

  action="build"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )

      if [[ -z ${args[target]+x} ]]; then

        args[target]=$1
        shift
      else
        other_args+=("$1")
        shift
      fi
      ;;

    esac
  done

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_docker_running)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_variables)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_docker_tag_namespace)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

nightwind_down_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_down_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v docker)" ]]; then
    printf "missing dependency: docker\n"
    exit 1
  fi
  if ! [[ -x "$(command -v find)" ]]; then
    printf "missing dependency: find\n"
    exit 1
  fi

  action="down"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )

      other_args+=("$1")
      shift
      ;;

    esac
  done

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_docker_running)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_variables)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_rendered_files)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_docker_tag_namespace)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

nightwind_exec_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_exec_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v docker)" ]]; then
    printf "missing dependency: docker\n"
    exit 1
  fi

  action="exec"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )

      if [[ -z ${args[container]+x} ]]; then

        args[container]=$1
        shift
      elif [[ -z ${args[command]+x} ]]; then

        args[command]=$1
        shift
      else
        other_args+=("$1")
        shift
      fi
      ;;

    esac
  done

  if [[ -z ${args[container]+x} ]]; then
    printf "missing required argument: CONTAINER\nusage: nightwind exec CONTAINER [COMMAND] [...]\n"
    exit 1
  fi

  [[ -n ${args[command]:-} ]] || args[command]="bash"

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_docker_running)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_variables)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

nightwind_nuke_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_nuke_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v docker)" ]]; then
    printf "missing dependency: docker\n"
    exit 1
  fi
  if ! [[ -x "$(command -v find)" ]]; then
    printf "missing dependency: find\n"
    exit 1
  fi

  action="nuke"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    --force )

      args[--force]=1
      shift
      ;;

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )

      other_args+=("$1")
      shift
      ;;

    esac
  done

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_docker_running)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_env_file_required)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_rendered_files)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

nightwind_composer_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_composer_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v docker)" ]]; then
    printf "missing dependency: docker\n"
    exit 1
  fi

  action="composer"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    --container )

      if [[ -n ${2+x} ]]; then

        args[--container]="$2"
        shift
        shift
      else
        printf "%s\n" "--container requires an argument: --container CONTAINER"
        exit 1
      fi
      ;;

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )

      if [[ -z ${args[command]+x} ]]; then

        args[command]=$1
        shift
      else
        other_args+=("$1")
        shift
      fi
      ;;

    esac
  done

  [[ -n ${args[--container]:-} ]] || args[--container]="app"

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_docker_running)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_variables)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_docker_tag_namespace)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

nightwind_npm_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_npm_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v docker)" ]]; then
    printf "missing dependency: docker\n"
    exit 1
  fi

  action="npm"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    --container )

      if [[ -n ${2+x} ]]; then

        args[--container]="$2"
        shift
        shift
      else
        printf "%s\n" "--container requires an argument: --container CONTAINER"
        exit 1
      fi
      ;;

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )

      if [[ -z ${args[command]+x} ]]; then

        args[command]=$1
        shift
      else
        other_args+=("$1")
        shift
      fi
      ;;

    esac
  done

  [[ -n ${args[--container]:-} ]] || args[--container]="app"

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_docker_running)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_variables)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_docker_tag_namespace)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

nightwind_artisan_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_artisan_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v docker)" ]]; then
    printf "missing dependency: docker\n"
    exit 1
  fi

  action="artisan"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    --container )

      if [[ -n ${2+x} ]]; then

        args[--container]="$2"
        shift
        shift
      else
        printf "%s\n" "--container requires an argument: --container CONTAINER"
        exit 1
      fi
      ;;

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )

      if [[ -z ${args[command]+x} ]]; then

        args[command]=$1
        shift
      else
        other_args+=("$1")
        shift
      fi
      ;;

    esac
  done

  [[ -n ${args[--container]:-} ]] || args[--container]="app"

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_docker_running)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_variables)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_docker_tag_namespace)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

nightwind_logs_parse_requirements() {

  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_logs_usage
    exit
    ;;

  esac

  if ! [[ -x "$(command -v docker)" ]]; then
    printf "missing dependency: docker\n"
    exit 1
  fi

  action="logs"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      other_args+=("$1")
      shift
      ;;

    * )

      if [[ -z ${args[container]+x} ]]; then

        args[container]=$1
        shift
      else
        other_args+=("$1")
        shift
      fi
      ;;

    esac
  done

  if [[ -z ${args[container]+x} ]]; then
    printf "missing required argument: CONTAINER\nusage: nightwind logs CONTAINER [...]\n"
    exit 1
  fi

  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_docker_running)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_requires_variables)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

initialize() {
  version="v1.0.0"
  long_usage=''
  set -e

  # Bootstrap things before executing command.
  # ensure .env file is sourced for this project.
  if [ -f ./.env ]
  then
      set -o allexport
      source ./.env
      set +o allexport
  fi
}

run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "init" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_init_usage
    else
      nightwind_init_command
    fi

  elif [[ $action == "render" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_render_usage
    else
      nightwind_render_command
    fi

  elif [[ $action == "up" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_up_usage
    else
      nightwind_up_command
    fi

  elif [[ $action == "build" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_build_usage
    else
      nightwind_build_command
    fi

  elif [[ $action == "down" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_down_usage
    else
      nightwind_down_command
    fi

  elif [[ $action == "exec" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_exec_usage
    else
      nightwind_exec_command
    fi

  elif [[ $action == "nuke" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_nuke_usage
    else
      nightwind_nuke_command
    fi

  elif [[ $action == "composer" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_composer_usage
    else
      nightwind_composer_command
    fi

  elif [[ $action == "npm" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_npm_usage
    else
      nightwind_npm_command
    fi

  elif [[ $action == "artisan" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_artisan_usage
    else
      nightwind_artisan_command
    fi

  elif [[ $action == "logs" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_logs_usage
    else
      nightwind_logs_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
