# Show the logo if no commands are being called or a --help option is present

# header.sh doesnt have access to lib/helpers for some reason.
cli_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

source "$cli_path/src/support/colors.sh"
source "$cli_path/src/support/helpers.sh"

if [ "$#" -eq 0 ] || [[ "$*" == *--help* ]]; then
    export LOGO_TEXT=$(
        cat <<EOF

                █▄░█ █ █▀▀ █░█ ▀█▀ █░█░█ █ █▄░█ █▀▄
                █░▀█ █ █▄█ █▀█ ░█░ ▀▄▀▄▀ █ █░▀█ █▄▀

EOF
    )

    export LOGO_BOAT=$(
        cat <<EOF

*     .  *        *                    *           .     .  *        *                    *
    .         '       .        .     .        .         '       .        .     .
.  *           *                     *        .  *           *                     *
                .                                    .                .
*      *         '    *          .   *           .      *         '    *          .   *

              .     .  *        *                    *
                               ___
                            ___)__)___
                            )__)__)__)
                           _____||_____
                            )_ )__)_)_)
                            __|_||_|____
                            \         /
$(blue "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
EOF
    )
    yellow "$LOGO_TEXT"
    bold "$LOGO_BOAT"
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
nightwind_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind - A command-line interface for interacting and managing Laravel docker projects with blade rendered templates.\n"
    echo

  else
    printf "nightwind - A command-line interface for interacting and managing Laravel docker projects with blade rendered templates.\n"
    echo

  fi

  printf "Usage:\n"
  printf "  nightwind [command]\n"
  printf "  nightwind [command] --help | -h\n"
  printf "  nightwind --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  init   Initialize project .nightwind directory & template files."
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
nightwind_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "nightwind init - Initialize project .nightwind directory & template files.\n"
    echo

  else
    printf "nightwind init - Initialize project .nightwind directory & template files.\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "Usage:\n"
  printf "  nightwind init [options]\n"
  printf "  nightwind init --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --force"
    printf "    Overwrite existing files.\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/support/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
lightgreen() { print_in_color "\e[1;32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/support/filters.sh
#!/bin/bash

filter_docker_running() {
  docker info > /dev/null 2>&1 || echo "$(red DependencyError:) $(bold Docker is not running.)"
}

filter_is_initialized(){
    if [ ! -d ".nightwind" ] || [ -z "$(ls -A ".nightwind/templates")" ]
    then
        echo "$(red This project does not appear to be initialized. Run: \`nightwind init\`)"
    fi
}

filter_env_file_required(){
    if [ ! -f ".env" ]
    then

        echo "$(red  Project .env file is missing.)"
    fi
}

filter_is_laravel_directory(){
    if  [ ! -f "composer.json" ] || ! grep -q "laravel/framework" composer.json

    then
        echo "$(red Your current directory doesnt appear to be a laravel/framework project.)"
    fi
}

filter_requires_variables(){
    if [ ! -f ".nightwind/variables.json" ]
    then

        echo "$(red  Command requires the .nightwind/variables.json file to perform task\(s\). Did you run \`nightwind init\`?)"
    fi
}

filter_requires_rendered_files(){
    if [ ! -d ".nightwind/rendered" ] || [ -z "$(ls -A ".nightwind/rendered")" ]
    then
        echo "$(red The template files have not been rendered. Run: \`nightwind render\`)"
    fi
}

# src/support/helpers.sh
#!/bin/bash
get_cli_path(){
    echo "$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
}

parse_variable_json_value(){
    result="$(grep -o "\"${1}\": \"[^\"]*" .nightwind/variables.json | grep -o '[^"]*$')"
    echo $result
}

write_file(){
    file=$1
    contents=$3
    force=$4

    if [[ $force != "1" ]] && [[ -f "$file" ]];

    then
        yellow "WARN: File $file already exists."
    fi

    if [[ $force == "1" || ! -f "$file" ]];

    then
        cyan "INFO: Saved file $file."
        echo "$contents" > $file
    fi
}

confirm() {
    message="${1:-Are you sure? [y/N]} "
    yellow "$message"
    read -r -p '' response
    echo -ne "\r"
    case "$response" in
    [yY][eE][sS] | [yY])
        true
        ;;
    *)
        false
        ;;
    esac
}

run_hook(){
    hook="$1"
    if [ -f ".nightwind/hooks/$hook" ];
    then
        if [[  -x ".nightwind/hooks/$hook" ]];
        then
            cyan "Running hook [$hook] script:"
            .nightwind/hooks/$hook
        else
            red "Hook file not executable: .nightwind/hooks/$hook"
            exit 1;
        fi
    fi

}

exec_command(){
    local container="$1"
    local command="$2"
    local -n other_arguments="$3"

    docker_tag_namespace="$(parse_variable_json_value docker_tag_namespace)"

    container="$docker_tag_namespace-${container/$docker_tag_namespace-/''}"

    cyan "Running: docker exec -it "$container" "$command" $other_args"
    docker exec -it "$container" $command $other_args
}

build_project_images(){
    local target="$1"
    local -n build_args="$2"

    docker_tag_namespace="$(parse_variable_json_value docker_tag_namespace)"

    # if no target has been specified, build all available files.
    if [ -z $target ]
    then
        paths="$(find ".nightwind/rendered/dockerfiles" -type f -name '*.Dockerfile')"
    else
        paths=(".nightwind/rendered/dockerfiles/$target.Dockerfile")
    fi

    for dockerfile in $paths;

    do
        filename="${dockerfile##*dockerfiles/}" ## get relative path
        target="${filename%%.*}"

        cyan "Running: docker build -t $docker_tag_namespace/$target -f .nightwind/rendered/dockerfiles/$filename . $build_args"
        docker build -t $docker_tag_namespace/$target -f ".nightwind/rendered/dockerfiles/$filename" . $build_args

    done
}

# :command.command_functions
# :command.function
nightwind_init_command() {
  # src/commands/init.sh
  #!/bin/bash

  # Initialize project .nightwind folder.
  set -e

  domain=${args[--domain]}

  mkdir -p ".nightwind"

  for file in $(find $(get_cli_path)/stubs -type f);

  do

      relative_path="${file##*stubs/}"

      destination_path=".nightwind/$relative_path"

      mkdir -p "$(dirname $destination_path)" ## ensure parent directory exists

      write_file $destination_path ".nightwind/$stub_type/$relative_path" "$(cat $file)" ${args[--force]}
  done

  # create a .gitignore to ignore rendered files
  if [ ! -f ".nightwind/.gitignore" ];
  then

      echo -e "rendered/" > ".nightwind/.gitignore"
  fi

  lightgreen "Initialized .nightwind directory & files."

  set +e
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    nightwind_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  init | i )
    action="init"
    shift
    nightwind_init_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    nightwind_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
nightwind_init_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    nightwind_init_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  if ! [[ -x "$(command -v find)" ]]; then
    printf "missing dependency: find\n"
    exit 1
  fi
  if ! [[ -x "$(command -v sed)" ]]; then
    printf "missing dependency: sed\n"
    exit 1
  fi
  # :command.command_filter
  action="init"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --force )
      # :flag.conflicts
      # :flag.case_no_arg
      args[--force]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
  filter_error=$(filter_is_laravel_directory)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi

  filter_error=$(filter_env_file_required)
  if [[ -n $filter_error ]]; then
    echo "$filter_error"
    exit 1
  fi
}

# :command.initialize
initialize() {
  version="v1.0.0"
  long_usage=''
  set -e

  # src/initialize.sh
  # Bootstrap things before executing command.
  # ensure .env file is sourced for this project.
  if [ -f ./.env ]
  then
      set -o allexport
      source ./.env
      set +o allexport
  fi
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "init" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      nightwind_init_usage
    else
      nightwind_init_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
